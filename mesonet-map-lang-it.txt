<?php
############################################################################
#
# This is the english language plugin file for the [network]-mesomap.php (Multilingual version)
# It needs to be in the same directory as the [network]-mesomap.php program itself.
# This definition file is equivalent to the Nordic-mesomap definition files except the names have been prefixed
# with 'RMNET_' on all definitions, and some definitions are not used in the non-Nordic versions.
# Ken True

# Version 1.00 - 24-Feb-2008 initial release
# Version 1.01 - 29-Sep-2009 updated for Version 2.03 (ML) of mesomap software
# Version 1.02 - 02-Oct-2009 updated for Version 2.04 (ML) of mesomap software
# Version 3.00 - 24-Jul-2016 repurposed for mesonet-map.php with editing
# Version 3.03 - 31-Jul-2016 - added CBI display support 
# Version 4.03 - 29-May-2018 - removed preg_replace e modifier for timezone processing

define('RMNET_LANGVERSION', 'mesonet-map-lang-it.txt - Version 4.03 - 29-May-2018');
// Main
define('RMNET_CHARSET','ISO-8859-1');

define('RMNET_COLSORT', 'Nota: Clicca sul titolo delle colonne per ordinare la tabella in base ai valori meteo.');

// Tables and title= tags
define('RMNET_CURRHEAD', 'Condizioni attuali delle stazioni affiliate ad Hellas Meteo Network');

// TABLEHEADER
define('RMNET_FEAT', 'Caratteristiche<br/>stazione meteo');
define('RMNET_STATE', 'Periferie');
define('RMNET_STATION','Stazione');
define('RMNET_CURHEAD', 'Cond.<br/>Meteo');
define('RMNET_CONDL','Cond. attuali');
define('RMNET_TEMP', 'Temp');
define('RMNET_TEMPL', 'Temperatura');
define('RMNET_DEWPT', 'P.to Rugiada');
define('RMNET_DEWPTABBREV','PR');
define('RMNET_HUM', 'Umi.');
define('RMNET_HUML', 'Umidità');
define('RMNET_AVGWIND', 'Vento');
define('RMNET_GUSTWIND', 'Raffica');
define('RMNET_GUSTABBREV', 'R');
define('RMNET_WINDL', 'Direz. del vento @ Vel./Raffica');
define('RMNET_WIND', 'Vento');
define('RMNET_WINDFROM', 'Vento da');
define('RMNET_PRECIPS', 'Pioggia');
define('RMNET_PRECIPSL', 'Pioggia odierna');
define('RMNET_BAROB', 'Baro');
define('RMNET_BAROT', 'Baro<br/>Tendenza');
define('RMNET_BAROL', 'Barometro &amp; Tendenza');
define('RMNET_SNOB', 'Neve');
define('RMNET_TXTGUST', 'Raffica');
define('RMNET_DATAUPDT', 'Data<br />Updated');
define('RMNET_NOCOND', 'Il rapporto relativo alle condizioni attuali non è disponibile.');
define('RMNET_TOWN',"Citta'");
define('RMNET_CBI', 'Fire<br/>Danger');
define('RMNET_CBILEGEND','Fire Danger [Chandler Burning Index]');
define('RMNET_CBI_EXTREME','Extreme');
define('RMNET_CBI_VERYHIGH','Very High');
define('RMNET_CBI_HIGH','High');
define('RMNET_CBI_MODERATE','Moderate');
define('RMNET_CBI_LOW','Low');

define('RMNET_OFFLINE',"Non disp."); // text to display on mesomap when station data is stale/not available

// for javascript animation control button lables
define('RMNET_RUN', 'Run');
define('RMNET_PAUSE', 'Pause');
define('RMNET_STEP', 'Step');

define('RMNET_CONDSFROM', 'I dati sulle condizioni meteo sono stati raccolti<br/>da');
// date-time appears
define('RMNET_CONDSTO', 'a');

// the following functions are used to translate various things ..
// replace the '...' after the => in each of the arrays below for local language
// do not change the '..' before the => .. it is the key used for the lookups

// Wind direction abbreviations

function RMNET_lang_winddir($rawd) {

$txtdir =  array(  
'N' => 'N',
'NNE' => 'NNE',
'NE' => 'NE',
'ENE' => 'ENE',
'E' => 'E',
'ESE' => 'ESE',
'SE' => 'SE',
'SSE' => 'SSE',
'S' => 'S',
'SSW' => 'SSO',
'SW' => 'SO',
'WSW' => 'OSO',
'W' => 'O',
'WNW' => 'ONO',
'NW' => 'NO',
'NNW' => 'NNO',
);

if(isset($txtdir[$rawd])) {
  $txtdire = $txtdir[$rawd];
 } else {
  $txtdire = $rawd;
}
return $txtdire;
}

// Barometer trend abbreviations

function RMNET_lang_barotrend($rawe) {

$tbaro = strtolower($rawe);

$txtbarot =  array(  
'Rising' => 'Aumento',
'Falling' => 'Diminuzione',
'Rising Slowly' => 'Aumento lento',
'Rising Rapidly' => 'Aumento rapido',
'Falling Slowly' => 'Diminuzione lenta',
'Falling Rapidly' => 'Diminuzione rapida',
'Steady' => 'Stabile'
);

if(isset($txtbarot[$rawe])) {
  $txtbart = $txtbarot[$rawe];
 } else {
  $txtbart = $rawe;
 }
return $txtbart;
}


function RMNET_lang_stationfeatures($rawg) {

$txtfeat =  array(  
'Weather, Lightning, WebCam' => 'Meteo, Fulmini, WebCam',
'Weather, WebCam, Lightning' => 'Meteo, WebCam, Fulmini',
'Weather, WebCam' => 'Meteo, WebCam',
'Weather, Lightning' => 'Meteo, Fulmini',
'Weather' => 'Meteo'
);

$rawg = preg_replace('|\s+|s','',$rawg);
$rawg = preg_replace('|,|s',', ',$rawg);
if(isset($txtfeat[$rawg])) {
  $txtfeatu = $txtfeat[$rawg];
 } else {
  $txtfeatu = $rawg;
 }
return $txtfeatu;
}

// Condition names (based on standard WD icon names)

function RMNET_lang_WXconds($rawh) {

$txticon =  array( 

'Sunny' =>  'Soleggiato',
'Clear' =>  'Sereno',
'Cloudy' =>  'Nuvoloso',
'Cloudy2' =>  'Nuvoloso',
'Partly Cloudy' =>  'Parz. nuvoloso',
'Mostly Cloudy' =>  'Molto nuvoloso',
'Scattered Clouds' => 'Nubi sparse',
'light Drizzle' => 'Leggera pioviggine',
'Drizzle' => 'Pioviggine',
'Dry' =>  'Secco',
'Fog' =>  'Nebbia',
'Haze' =>  'Foschia',
'Heavy Rain' =>  'Pioggia intensa',
'Mainly Fine' =>  'Nubi sparse',
'Mist' => 'Foschia',
'Fog' => 'Nebbia',
'Heavy Rain' => 'Piogia intensa',
'Overcast' => 'Coperto',
'Rain' => 'Pioggia',
'light Rain' => 'Pioggia debole',
'light Rain +Mist' => 'Pioggia debole, Foschia',
'heavy Rain' => 'Pioggia forte',
'Showers' => 'Rovesci',
'Snow' => 'Neve',
'Thunder' => 'Tuoni',
'Overcast' => 'Coperto',
'Rain2' => 'Pioggia',
'Showers2' => 'Rovesci',
'Sleet' => 'Nevischio',
'Sleet Showers' => 'Debole nevischio',
'Snow' => 'Neve',
'Snow Melt' => 'Neve bagnata',
'Snow Showers2' => 'Rovescio di neve',
'Sunny' => 'Soleggiato',
'Thunder Showers' => 'Temporale, Rovesci',
'Thunder Showers2' => 'Temporale, Rovesci',
'Thunderstorm' => 'Temporale',
'Nearby Thunderstorm' => 'Temporale nelle vicinanze',
'Thunder Storms' => 'Temporali',
'light Thunderstorm Rain' => 'Temporale, Pioggia leggera',
'heavy Thunderstorm Rain' => 'Forte temporale',
'Tornado' => 'Tornado',
'Windy' => 'Ventoso',
'Stopped Raining' => 'Pioggia Terminata',
'Wind/Rain' => 'Pioggia a vento'

);
if(isset($txticon[$rawh]) ) {
  $txticons = $txticon[$rawh];
 } else {
  $txticons = $rawh;
}
return $txticons;
}

// lookup for Region names (optional)

function RMNET_lang_region($rawr) {
$txtregions = array(
// put 'english region name' => 'translated region name',   here

  'Attica' => 'Attica',
  'Central Greece' => 'Grecia Centrale',
  'Macedonia' => 'Macedonia',
  'Crete' => 'Creta',
  'Thrace' => 'Tracia',
  'Epirus' => 'Eprio',
  'Ionian Islands' => 'Isole Ionie',
  'Peloponnese' => 'Peloponneso',
  'Aegean' => 'Egeo Meridionale',
  'Thessaly' => 'Tessaglia',

);

if(isset($txtregions[$rawr])) {
  $tregion = $txtregions[$rawr];
 } else { 
  $tregion = $rawr;
}
return $tregion;

}

// lookup for Timezone names (optional)
function RMNET_lang_fixTZname ($timestring) {
	$tstr = $timestring;
	$tSF = strftime("%Z",time()); // might be long-form name
	$tRE = date('T',time()); // normal 3 or 4 character abbreviation
	
	if($tSF !== $tRE) { // fix long form to short form if needed
		$tstr = str_replace($tSF,$tRE,$tstr);
	}
	
	$timeZoneAbbrev = array(
	 // Put entries here like 'EST' => 'whatever', ...
	 'EET' => 'EET',
	 'EEST' => 'EEST',
	 );
	
	if (isset($timeZoneAbbrev[$tRE]) ) {
		$temp = str_replace($tRE,$timeZoneAbbrev[$tRE],$tstr);
		if($temp <> '') { $tstr = $temp; }
	}
	return $tstr;

}

// ---------------------end of mesonet-map-lang-it.txt-------------------------------
?>